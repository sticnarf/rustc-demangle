var N=null,E="",T="t",U="u",searchIndex={};
var R=["demangle","trydemangleerror","result","try_from","try_into","borrow","borrow_mut","type_id","typeid","formatter","Demangle","TryDemangleError"];

searchIndex["rustc_demangle"]={"doc":"Demangle Rust compiler symbol names.","i":[[3,R[10],"rustc_demangle","Representation of a demangled symbol name.",N,N],[3,R[11],E,"Error returned from the `try_demangle` function below when…",N,N],[5,R[0],E,"De-mangles a Rust symbol into a more readable version",N,[[["str"]],[R[0]]]],[5,"try_demangle",E,"The same as `demangle`, except return an `Err` if the…",N,[[["str"]],[[R[0]],[R[1]],[R[2],[R[0],R[1]]]]]],[11,"as_str",E,"Returns the underlying string that's being demangled.",0,[[["self"]],["str"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[3],E,E,0,[[[U]],[R[2]]]],[11,"into",E,E,0,[[],[U]]],[11,R[4],E,E,0,[[],[R[2]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,"into",E,E,1,[[],[U]]],[11,R[4],E,E,1,[[],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"fmt",E,E,1,[[["self"],[R[9]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[9]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[9]]],[R[2]]]],[11,"clone",E,E,1,[[["self"]],[R[1]]]]],"p":[[3,R[10]],[3,R[11]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);